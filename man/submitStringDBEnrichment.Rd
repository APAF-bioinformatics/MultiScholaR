% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/multiomics_enrichment_functions.R
\name{submitStringDBEnrichment}
\alias{submitStringDBEnrichment}
\title{Submit STRING DB Values/Ranks Enrichment Analysis}
\usage{
submitStringDBEnrichment(
  input_data_frame,
  identifier_column_name,
  value_column_name,
  caller_identity,
  api_key,
  species = "9606",
  ge_fdr = 0.05,
  ge_enrichment_rank_direction = -1
)
}
\arguments{
\item{input_data_frame}{A data frame containing at least two columns: one for
identifiers and one for associated numerical values.}

\item{identifier_column_name}{Character string: The name of the column in
\code{input_data_frame} that contains the protein/gene
identifiers (e.g., Ensembl IDs, gene symbols).}

\item{value_column_name}{Character string: The name of the column in
\code{input_data_frame} that contains the numerical values
(e.g., log fold change, p-value, score) associated
with each identifier. This column must be numeric.}

\item{caller_identity}{Character string: An identifier for your script or application
(e.g., "my_research_project_R_script").}

\item{api_key}{Character string: Your personal STRING API key.}

\item{species}{Numeric: NCBI/STRING species identifier. Default is 9606 (Homo sapiens).}

\item{ge_fdr}{Numeric: FDR threshold for gene expression enrichment. Default is 0.05.}

\item{ge_enrichment_rank_direction}{Integer: Direction for enrichment rank.
(-1, 0, or 1). Default is -1.}
}
\value{
A list containing:
- \code{job_id}: The job ID if submission was successful, otherwise \code{NULL}.
- \code{api_key}: The API key used for the submission.
- \code{submission_response}: The full parsed JSON response from the API.
Messages about the submission status are also printed to the console.
}
\description{
Submits a job to the STRING API (version 12.0) for values/ranks enrichment analysis.
This function reads protein identifiers from an input file and sends them
to the STRING database for analysis.
}
\examples{
\dontrun{
# Create a dummy data frame
example_data <- data.frame(
  protein_id = c("TP53", "EGFR", "BRCA1", "TNF", "IL6", "MYC", "MISSING_ID", NA_character_),
  expression_value = c(-0.585, 0.388, -0.079, 1.2, -2.1, NA_real_, 0.99, 0.5),
  other_info = letters[1:8],
  stringsAsFactors = FALSE
)

# IMPORTANT: Replace "YOUR_API_KEY" with your actual STRING API key
# IMPORTANT: Replace "your_application_name" with a meaningful caller identity
submission_info <- submitStringDBEnrichment(
  input_data_frame = example_data,
  identifier_column_name = "protein_id",
  value_column_name = "expression_value",
  caller_identity = "my_R_enrichment_script_v3", # Updated example version
  api_key = "YOUR_API_KEY", # !!! REPLACE THIS !!!
  species = 9606, # Human
  ge_fdr = 0.05,
  ge_enrichment_rank_direction = -1
)

# Check the submission result
# Access status and message from the submission_response element
if (!is.null(submission_info$job_id) &&
    !is.null(submission_info$submission_response$status) &&
    submission_info$submission_response$status == "submitted") {
  message(paste("Job submitted. Job ID:", submission_info$job_id))

  # Attempt to retrieve results using the submission_info object directly
  enrichment_data <- retrieveStringDBEnrichmentResults(
    submission_info = submission_info, # Pass the whole list
    polling_interval_seconds = 10,
    max_polling_attempts = 12
  )

  if (!is.null(enrichment_data)) {
    message("Enrichment results downloaded successfully:")
    print(head(enrichment_data))
  } else {
    message("Failed to retrieve enrichment results.")
  }
} else if (!is.null(submission_info$submission_response$status) &&
           submission_info$submission_response$status == "error") {
  message(paste("API Error during submission:", submission_info$submission_response$message))
} else {
  message("Job submission was not successful, job_id is NULL, or status unknown.")
  # It's helpful to print the whole submission_info for debugging in this case
  print(submission_info)
}
}
}
