% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/multiomics_enrichment_functions.R
\name{retrieveStringDBEnrichmentResults}
\alias{retrieveStringDBEnrichmentResults}
\title{Retrieve STRING DB Enrichment Results}
\usage{
retrieveStringDBEnrichmentResults(
  submission_info,
  polling_interval_seconds = 10,
  max_polling_attempts = 30
)
}
\arguments{
\item{submission_info}{A list object returned by \code{submitStringDBEnrichment}.
This list must contain \code{job_id} (non-NULL) and \code{api_key}.}

\item{polling_interval_seconds}{Numeric: The number of seconds to wait between
polling attempts for job status. Default is 10.}

\item{max_polling_attempts}{Numeric: The maximum number of polling attempts before
timing out. Default is 30.}
}
\value{
A list containing the following elements if the job is successful:
- \code{enrichment_data}: A data frame of enrichment results (or \code{NULL} on download failure).
- \code{page_url}: Character string, URL to the STRING results page (or \code{NULL} if not found).
- \code{graph_url}: Character string, URL for the enrichment graph image (or \code{NULL} if not found).
- \code{graph_image_content}: Raw vector, the binary content of the graph image (or \code{NULL} on download failure).
- \code{status_details}: A data frame or list with the full status information from the last successful poll.
Returns \code{NULL} if the job polling ultimately fails, times out, or a critical error occurs.
}
\description{
Polls the STRING API for the status of a submitted enrichment job.
Upon successful completion, it obtains the download URL and then uses
\code{downloadStringDBResultsFile} to fetch and parse the results into a data frame.
}
\examples{
\dontrun{
# This function is typically used after submitStringDBEnrichment.
# Assume 'submission_info_output' is the actual list returned by
# a successful call to submitStringDBEnrichment.

# Example structure of submission_info_output:
# submission_info_output <- list(
#   job_id = "b3R6oioiQSRO",      # Actual job ID from a submission
#   api_key = "YOUR_API_KEY",   # The API key used
#   submission_response = list(
#     job_id = "b3R6oioiQSRO",
#     status = "submitted",
#     message = "Job was successfully submitted to the queue!"
#   )
# )

# Make sure job_id is present and the submission was initially successful
# before calling retrieveStringDBEnrichmentResults.
# if (!is.null(submission_info_output$job_id) &&
#     !is.null(submission_info_output$submission_response$status) &&
#     submission_info_output$submission_response$status == "submitted") {
#
#   results_list <- retrieveStringDBEnrichmentResults(
#     submission_info = submission_info_output, # Pass the list directly
#     polling_interval_seconds = 5,
#     max_polling_attempts = 6
#   )
#   if (!is.null(results_list)) {
#     if(!is.null(results_list$enrichment_data)) {
#        print(head(results_list$enrichment_data))
#     }
#     if(!is.null(results_list$graph_image_content)) {
#        writeBin(results_list$graph_image_content, "enrichment_graph.png")
#        message("Graph saved to enrichment_graph.png")
#     }
#     message(paste("Page URL:", results_list$page_url))
#   } else {
#     message("Could not retrieve enrichment results package.")
#   }
# } else {
# message("Submission was not successful or job_id missing in submission_info_output.")
# print(submission_info_output) # For debugging
# }
}
}
