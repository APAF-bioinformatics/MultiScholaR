% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/multiomics_functions_MOFA.R
\name{plotMofaWeights}
\alias{plotMofaWeights}
\title{Plot Top MOFA Weights for a Specific View and Factor}
\usage{
plotMofaWeights(model, view, factor_level = Factor1)
}
\arguments{
\item{model}{A trained MOFA model object, typically the output of
\code{MOFA2::run_mofa()} or a similar MOFA model fitting function. It is
expected to be compatible with \code{MOFA2::get_weights()}.}

\item{view}{Character string. The name of the view (e.g., "proteomics",
"transcriptomics") within the MOFA model for which to extract and plot weights.}

\item{factor_level}{An unquoted expression specifying the factor column name
(e.g., \code{Factor1}, \code{Factor2}) from the weights matrix of the specified view.
Defaults to \code{Factor1}. This is used with \code{dplyr}'s non-standard evaluation.}
}
\value{
A \code{ggplot} object representing the bar plot of the top MOFA weights.
}
\description{
This function visualizes the top 20 features (e.g., genes, proteins)
with the largest absolute weights for a given factor and view from a
Multi-Omics Factor Analysis (MOFA) model. The weights are presented
as a bar plot, colored by their direction (positive or negative).
The gene/protein names are cleaned by removing "_transcriptome" or
"_proteome" suffixes.

The plot is also saved to a file using the \code{savePlot} helper function,
which expects \code{project_dirs}, \code{omic_type}, and \code{experiment_label} to be
defined in the calling environment to determine the output path.
}
\examples{
\dontrun{
# This example assumes a trained MOFA model ('dummy_mofa_model') exists,
# and necessary helper functions/variables for 'savePlot' are available
# (e.g., 'project_dirs', 'omic_type', 'experiment_label', 'savePlot' function).
# It also assumes MOFA2 and tidyverse packages are loaded.

# Minimal setup for example:
# library(MOFA2) # if not loaded
# library(dplyr)
# library(ggplot2)

# # Create a dummy MOFA model (replace with your actual model)
# set.seed(123)
# view1_weights <- matrix(rnorm(30*2), ncol=2, dimnames=list(paste0("Feat",1:30,"_transcriptome"), c("Factor1","Factor2")))
# dummy_mofa_model <- list(weights = list(transcriptome = view1_weights))
# if (!exists("get_weights", mode = "function") & requireNamespace("MOFA2", quietly=TRUE)) {
#   get_weights <- MOFA2::get_weights # Ensure get_weights is available
# } else if (!exists("get_weights", mode="function")) {
#   get_weights <- function(model, views) model$weights[[views]] # Simple mock
# }
#
# # Mock project_dirs and other globals for savePlot
# project_dirs <- list(); omic_type <- "integration"; experiment_label <- "example"
# project_dirs[[paste0(omic_type, "_", experiment_label)]] <- list(mofa_plots_dir = tempdir())
# savePlot <- function(plot, base_path, plot_name, formats) {
#   ggsave(file.path(base_path, paste0(plot_name, ".", formats[1])), plot)
#   message("Plot saved to: ", file.path(base_path, paste0(plot_name, ".", formats[1])))
# }

# mofa_weights_plot <- plotMofaWeights(
#   model = dummy_mofa_model,
#   view = "transcriptome",
#   factor_level = Factor1
# )
# print(mofa_weights_plot)
}
}
